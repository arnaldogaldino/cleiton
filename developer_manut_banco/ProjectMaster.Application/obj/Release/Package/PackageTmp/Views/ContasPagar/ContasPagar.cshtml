@model ProjectMaster.Application.Models.ContaPagarModels
@{
    var read_only = "";

    ViewBag.Title = "Cadastro de Contas a Pagar";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";

    List<ProjectMaster.Core.ToolBarButton> Buttons = new List<ProjectMaster.Core.ToolBarButton>();

    string acao = string.Empty;

    if (ViewData["acao"] == null)
    {
        acao = "New";
    }

    if (ViewData["acao"] != null || ViewData["acao"] == "New")
    {
        acao = ViewData["acao"].ToString();
    }

    if (acao.Equals("New", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar nova Contas a Pagar.", "Cadastrar nova Contas a Pagar.", "novo", "", Url.Content("~/ContasPagar/ContasPagar?acao=New"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Contas a Pagar.", "Editar Contas a Pagar.", "editar", "", Url.Content("~/ContasPagar/ContasPagar?acao=Edit&id_conta_pagar=" + Model.id_conta_pagar), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Contas a Pagar.", "Excluir Contas a Pagar.", "excluir", "", Url.Content("~/ContasPagar/ContasPagar"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Contas a Pagar.", "Gravar Contas a Pagar.", "gravar", "", "javascript:ShowLoad();$('#formulario_contas_pagar').submit();", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/ContasPagar/ContasPagar"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/ContasPagar/Index"), true, true));
        read_only = "";
    }

    if (acao.Equals("Edit", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar nova Contas a Pagar.", "Cadastrar nova Contas a Pagar", "novo", "", Url.Content("~/ContasPagar/ContasPagar?acao=New"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Contas a Pagar.", "Editar Contas a Pagar.", "editar", "", Url.Content("~/ContasPagar/ContasPagar?acao=Edit&id_conta_pagar=" + Model.id_conta_pagar), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Contas a Pagar.", "Excluir Contas a Pagar.", "excluir", "", "JavaScript:delete_file(" + Model.id_conta_pagar + ",'ContasPagar','form')", true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Contas a Pagar.", "Gravar Contas a Pagar.", "gravar", "", "javascript:ShowLoad();$('#formulario_contas_pagar').submit();", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/ContasPagar/ContasPagar?acao=View&id_conta_pagar=" + Model.id_conta_pagar), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/ContasPagar/Index"), true, true));
        read_only = "";
    }

    if (acao.Equals("View", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar novo Contas a Pagar.", "Cadastrar nova Contas a Pagar.", "novo", "", Url.Content("~/ContasPagar/ContasPagar?acao=New"), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Contas a Pagar.", "Editar Contas a Pagar.", "editar", "", Url.Content("~/ContasPagar/ContasPagar?acao=Edit&id_conta_pagar=" + Model.id_conta_pagar), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Contas a Pagar.", "Excluir Contas a Pagar.", "excluir", "", "JavaScript:delete_file(" + Model.id_conta_pagar + ",'ContasPagar','form')", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Contas a Pagar.", "Gravar Contas a Pagar.", "gravar", "", Url.Content("~/ContasPagar/ContasPagar"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/ContasPagar/ContasPagar"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/ContasPagar/Index"), true, true));
        read_only = "readonly='readonly'";
    }
}
@Html.Partial("_vuToolBar", Buttons)

<div id="main" class="main-scroll">
@using (Html.BeginForm("ContasPagar", "ContasPagar", FormMethod.Post, new { id = "formulario_contas_pagar", name = "formulario_contas_pagar" }))
{   
    <fieldset title="ContasPagar">
        <legend>Contas a Pagar</legend>
        <label class="normal">Id:</label>
        <input type="text" value="@Model.id_conta_pagar" id="id_conta_pagar" name="id_conta_pagar" size="7" maxlength="6" readonly="readonly" />
        
        <br />
        
        <label class="normal">Data de Emissão:</label>
        <input type="text" value="@(Model.dta_emissao == DateTime.MinValue ? DateTime.Now.ToString("dd/MM/yyyy") : Model.dta_emissao.ToString("dd/MM/yyyy"))" id="dta_emissao" name="dta_emissao" size="10" maxlength="10" readonly='readonly' />
        @Html.ValidationMessage("dta_emissao", "*")

        <label class="normal">Data de Vencimento:</label>
        <input type="text" value="@(Model.dta_vencimento == DateTime.MinValue ? "" : Model.dta_vencimento.ToString("dd/MM/yyyy"))" id="dta_vencimento" name="dta_vencimento" size="10" maxlength="10" readonly='readonly' />
        @Html.ValidationMessage("dta_vencimento", "*")

        <br />
        
        <label class="normal">Data de Vencimento:</label>
        
            <input type="text" value="@Model.ds_marca" id="ds_marca" name="ds_marca" size="20" maxlength="50" @read_only />
            <input type="hidden" value="@Model.id_pessoa" id="id_pessoa" name="id_pessoa" />

            <a href="javascript:procurar_pessoa();">
                <img src="@Url.Content("~/Content/images/buttons/procurar_16x16.png")" id="procurar_pessoa" alt="Procurar Cliente" width="16" height="16" />
            </a>

            <input type="text" value="@Model.ds_razao_social" id="ds_razao_social" name="ds_razao_social" size="60" maxlength="100" readonly='readonly' />
            @Html.ValidationMessage("id_pessoa", "*")

            <script type="text/javascript">

                $("#ds_marca").change(function () {

                    $("#ds_razao_social").val("");
                    $("#id_pessoa").val("0");

                    if ($('#ds_marca').val() == '') {
                        $("#ds_razao_social").val("");
                        $("#id_pessoa").val("0");
                        return;
                    }

                    if ($('#id_pessoa').val() != '0')
                        return;

                    LookupPessoa("ds_marca", "ds_razao_social", "id_pessoa");
                });

                function procurar_pessoa() {
                    $("#ds_marca").val("");
                    LookupPessoa("ds_marca", "ds_razao_social", "id_pessoa");
                }
            </script>

        <br />
        
            <label class="normal">Centro de Custo:</label>
            @if (string.IsNullOrEmpty(read_only))
            { 
                @Html.DropDownListFor(model => model.id_centro_de_custo, ProjectMaster.Bussiness.CentroDeCusto.GetDomainByCentroDeCusto(true));
            }
            else
            { 
                @Html.DropDownListFor(model => model.id_centro_de_custo, ProjectMaster.Bussiness.CentroDeCusto.GetDomainByCentroDeCusto(true), new { disabled = "disabled" });
            }
            @Html.ValidationMessage("id_centro_de_custo", "*")
                
        <br />
         
        <label class="normal">Valor do Titulo:</label>
        <input type="text" value="@Model.vlr_titulo.ToString("n2")" id="vlr_titulo" name="vlr_titulo" size="20" maxlength="60" @read_only alt="decimal9" />

        <label class="normal">Valor do Juros:</label>
        <input type="text" value="@Model.vlr_juros.ToString("n2")" id="vlr_juros" name="vlr_juros" size="20" maxlength="60" @read_only alt="decimal9" />

        <label class="normal">Valor Multa:</label>
        <input type="text" value="@Model.vlr_multa.ToString("n2")" id="vlr_multa" name="vlr_multa" size="20" maxlength="60" @read_only alt="decimal9" />
        
        <br />
        
        <label class="normal">Data Pagto:</label>
        <input type="text" value="@(Model.dta_pagto.HasValue ? Model.dta_pagto.Value.ToString("dd/MM/yyyy") : "")" id="dta_pagto" name="dta_pagto" size="10" maxlength="10" readonly='readonly' />
                
        <label class="normal">Valor Pagto:</label>
        <input type="text" value="@(Model.vlr_pagto.HasValue ? Model.vlr_pagto.Value.ToString("n2") : "")" id="vlr_pagto" name="vlr_pagto" size="20" maxlength="60" @read_only alt="decimal9" />
        
        <br />
        
        <label class="normal">Observação:</label>
        <input type="text" value="@Model.obs" id="obs" name="obs" size="100" maxlength="100" @read_only />
        
    </fieldset>  
    @Html.ValidationSummary()

    <script type="text/javascript">
        $("#dta_vencimento").datepicker({
            beforeShowDay: $.datepicker.noWeekends,
            dateFormat: "dd/mm/yy",
            dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
            dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
            dayNamesMin: ["D", "S", "T", "Q", "Q", "S", "S"],
            monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
            monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
        });
        $("#dta_pagto").datepicker({
            beforeShowDay: $.datepicker.noWeekends,
            dateFormat: "dd/mm/yy",
            dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
            dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
            dayNamesMin: ["D", "S", "T", "Q", "Q", "S", "S"],
            monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
            monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
        });
    </script>
}
</div>

<div id="dialog-confirm" style="display: none" title="Contas a Pagar">
<p>
<span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>
Excluir Contas a Pagar?
</p>
</div>