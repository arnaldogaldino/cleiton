@model ProjectMaster.Application.Models.PessoaModels
@{
    var read_only = "";

    ViewBag.Title = "Cadastro de Pessoa ( Cliente / Fornecedor / Transportadora )";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";

    List<ProjectMaster.Core.ToolBarButton> Buttons = new List<ProjectMaster.Core.ToolBarButton>();

    string acao = string.Empty;

    if (ViewData["acao"] == null)
    {
        acao = "New";
    }

    if (ViewData["acao"] != null || ViewData["acao"] == "New")
    {
        acao = ViewData["acao"].ToString();
    }

    if (acao.Equals("New", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar nova Pessoa.", "cadastrar", "CadastrarNovo", "", Url.Content("~/Pessoa/Pessoa?acao=New"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Pessoa.", "Editar Pessoa.", "editar", "", Url.Content("~/Pessoa/Pessoa?acao=Edit&id_pessoa=" + Model.id_pessoa), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Pessoa.", "Excluir Pessoa.", "excluir", "", Url.Content("~/Pessoa/Pessoa"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Pessoa.", "Gravar Pessoa.", "gravar", "", "javascript:ShowLoad();$('#formulario_pessoa').submit();", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/Pessoa/Pessoa"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/Pessoa/Index"), true, true));
        read_only = "";
    }

    if (acao.Equals("Edit", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar nova Pessoa.", "cadastrar", "CadastrarNovo", "", Url.Content("~/Pessoa/Pessoa?acao=New"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Pessoa.", "Editar Pessoa.", "editar", "", Url.Content("~/Pessoa/Pessoa?acao=Edit&id_pessoa=" + Model.id_pessoa), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Pessoa.", "Excluir Pessoa.", "excluir", "", "JavaScript:delete_file(" + Model.id_pessoa + ",'Pessoa','form')", true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Pessoa.", "Gravar Pessoa.", "gravar", "", "javascript:ShowLoad();$('#formulario_pessoa').submit();", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/Pessoa/Pessoa?acao=View&id_pessoa=" + Model.id_pessoa), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/Pessoa/Index"), true, true));
        read_only = "";
    }

    if (acao.Equals("View", StringComparison.OrdinalIgnoreCase))
    {
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.CadastrarNovo, "Cadastrar nova Pessoa.", "cadastrar", "CadastrarNovo", "", Url.Content("~/Pessoa/Pessoa?acao=New"), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Editar, "Editar Pessoa.", "Editar Pessoa.", "editar", "", Url.Content("~/Pessoa/Pessoa?acao=Edit&id_pessoa=" + Model.id_pessoa), true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Excluir, "Excluir Pessoa.", "Excluir Pessoa.", "excluir", "", "JavaScript:delete_file(" + Model.id_pessoa + ",'Pessoa','form')", true, true));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Gravar, "Gravar Pessoa.", "Gravar Pessoa.", "gravar", "", Url.Content("~/Pessoa/Pessoa"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Cancelar, "Cancelar ação.", "Cancelar ação.", "cancelar", "", Url.Content("~/Pessoa/Pessoa"), true, false));
        Buttons.Add(new ProjectMaster.Core.ToolBarButton(ProjectMaster.Core.ToolBarButtonType.Voltar, "Voltar.", "Voltar", "voltar", "", Url.Content("~/Pessoa/Index"), true, true));
        read_only = "readonly='readonly'";
    }
}
@Html.Partial("_vuToolBar", Buttons)

<div id="main" class="main-scroll">
@using (Html.BeginForm("Pessoa", "Pessoa", FormMethod.Post, new { id = "formulario_pessoa", name = "formulario_pessoa" }))
{   
    <fieldset title="Cliente / Fornecedor / Transportadora">
        <legend>Cliente / Fornecedor / Transportadora</legend>

        <label class="normal">Id:</label>
        <input type="text" value="@Model.id_pessoa" id="id_pessoa" name="id_pessoa" size="7" maxlength="6" readonly="readonly" />

        <br />
        
        <label class="normal">Marca / Código:</label>
        <input type="text" value="@Model.ds_marca" id="ds_marca" name="ds_marca" size="30" maxlength="25" @read_only />
        @Html.ValidationMessage("ds_marca", "*")

        <label class="normal">Tipo Cadastro:</label>
        @if (string.IsNullOrEmpty(read_only))
        { 
            @Html.DropDownListFor(model => model.dm_tipo_pessoa, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoCliente, true));
        }
        else
        { 
            @Html.DropDownListFor(model => model.dm_tipo_pessoa, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoCliente, true), new { disabled = "disabled" });
        }
        @Html.ValidationMessage("dm_tipo_pessoa", "*")

        <br />

        <label class="normal">Razão Social:</label>
        <input type="text" value="@Model.ds_razao_social" id="ds_razao_social" name="ds_razao_social" size="80" maxlength="60" @read_only />
        @Html.ValidationMessage("ds_razao_social", "*")

        <br />
        
        <label class="normal">Nome Fantasia:</label>
        <input type="text" value="@Model.ds_nome_fantasia" id="ds_nome_fantasia" name="ds_nome_fantasia" size="80" maxlength="60" @read_only />
        
        <br />        
        
        <label class="normal">Tipo Documento:</label>
        @if (string.IsNullOrEmpty(read_only))
        { 
            @Html.DropDownListFor(model => model.dm_tipo_documento, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoDocumento, true));
        }
        else
        { 
            @Html.DropDownListFor(model => model.dm_tipo_documento, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoDocumento, true), new { disabled = "disabled" });
        }
        @Html.ValidationMessage("dm_tipo_documento", "*")
                
        <label class="normal">Número Documento:</label>
        <input type="text" value="@Model.nr_documento" id="nr_documento" name="nr_documento" size="20" maxlength="14" @read_only />
        @Html.ValidationMessage("nr_documento", "*")
                        
        <br />     
                        
        <label class="normal">Inscrição Estadual:</label>
        <input type="text" value="@Model.nr_ie" id="nr_ie"" name="nr_ie"" size="20" maxlength="14" @read_only />
        @Html.ValidationMessage("nr_ie", "*")
                                      
        <label class="normal">Inscrição SUFRAMA:</label>
        <input type="text" value="@Model.nr_inscricao_suframa" id="nr_inscricao_suframa"" name="nr_inscricao_suframa"" size="10" maxlength="9" @read_only />
        @Html.ValidationMessage("nr_inscricao_suframa", "*")

        <br />  

        <label class="normal">Tipo do Cliente para Crédito:</label>
        @if (string.IsNullOrEmpty(read_only))
        { 
            @Html.DropDownListFor(model => model.dm_tipo_cliente_credito, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoClienteCredito, true));
        }
        else
        { 
            @Html.DropDownListFor(model => model.dm_tipo_cliente_credito, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.TipoClienteCredito, true), new { disabled = "disabled" });
        }

        <label class="normal">Limite de Crédito:</label>
        @if (string.IsNullOrEmpty(read_only))
        { 
            @Html.DropDownListFor(model => model.dm_limite_credito, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.LimiteCredito, true));
        }
        else
        { 
            @Html.DropDownListFor(model => model.dm_limite_credito, ProjectMaster.Bussiness.Domain.GetDomainByTipo(ProjectMaster.Bussiness.Domain.Tipos.LimiteCredito, true), new { disabled = "disabled" });
        }

        <label class="normal">Venda Agendada:</label>
        <input type="checkbox" value="@Model.venda_agendada" id="venda_agendada" name="venda_agendada" @read_only />

    </fieldset>  
    
    @Html.ValidationSummary()

    @Html.Action("Endereco", "Pessoa", new { enderecos = Model == null ? null : Model.Endereco, acao = acao })

    @Html.Action("Telefone", "Pessoa", new { telefones = Model == null ? null : Model.Telefone, acao = acao })
    
    @Html.Action("ContaCorrente", "Pessoa", new { conta_corrente = Model == null ? null : Model.ContaCorrente, acao = acao })
    
    <br />
}
</div>

<div id="dialog-confirm" title="Pessoa" style="display: none">
    <p><span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>Excluir Pessoa?</p>
</div>
